@using DancingGoat.Search.Models
@using DancingGoat.Search
@using Microsoft.AspNetCore.Mvc.Localization

@model GeoLocationSearchViewModel
@{
    Dictionary<string, string> GetRouteData(int page) =>
        new Dictionary<string, string>() {
            { "query", Model.Query },
            { "pageSize", Model.PageSize.ToString() },
            { "page", page.ToString() },
            { "latitude", Model.Latitude.ToString() },
            { "longitude", Model.Longitude.ToString() },
            { "sortByDistance", Model.SortByDistance.ToString() },
            { "indexName", Model.IndexName }
                };
}

<h1>Search</h1>

<style>
    .form-field {
        margin-bottom: 0.8rem;
    }
</style>

<form asp-action=@Model.Endpoint method="get">
    <div class="row">
        <div class="col-md-12">
            <div class="form-field">
                <label class="control-label" asp-for="@Model.Query"></label>
                <div class="editing-form-control-nested-control">
                    <input class="form-control" asp-for="@Model.Query" name="query">
                    <input type="hidden" asp-for="@Model.PageSize" name="pageSize" />
                    <input type="hidden" asp-for="@Model.Page" name="page" />
                    <input type="hidden" id="latitude" asp-for="@Model.Latitude" name="latitude" />
                    <input type="hidden" id="longitude" asp-for="@Model.Longitude" name="longitude" />
                    <input type="hidden" asp-for="@Model.IndexName" name="indexName" />
                </div>
            </div>
        </div>
    </div>
    <label for="sortByDistance">Sort By Distance</label>
    <input type="checkbox" id="sortByDistance" value="true" asp-for="@Model.SortByDistance" name="sortByDistance">
    <input type="submit" value="Submit">
</form>

@if (!Model.Hits.Any())
{
    if (!String.IsNullOrWhiteSpace(Model.Query))
    {
        @HtmlLocalizer["Sorry, no results match {0}", Model.Query]
    }

    return;
}

@foreach (var item in Model.Hits)
{
    <div class="col-sm-12">
        <div class="section-text">
            <h3 class="h4 search-tile-title">
                <a href="@item.Url">@item.Title</a>
            </h3>
            <div>
                @Html.Raw(item.Location)
            </div>
        </div>
    </div>
}

<div class="pagination-container">
    <ul class="pagination">
        @if (Model.Page > 1)
        {
            <li class="PagedList-skipToPrevious">
                <a asp-controller="Search" asp-all-route-data="GetRouteData(Model.Page - 1)">
                    @HtmlLocalizer["previous"]
                </a>
            </li>
        }

        @for (int pageNumber = 1; pageNumber <= Model.TotalPages; pageNumber++)
        {
            if (pageNumber == Model.Page)
            {
                <li class="active">
                    <span>
                        @pageNumber
                    </span>
                </li>
            }
            else
            {
                <li>
                    <a asp-controller="Search" asp-all-route-data="GetRouteData(pageNumber)">@pageNumber</a>
                </li>
            }
        }

        @if (Model.Page < Model.TotalPages)
        {
            <li class="PagedList-skipToNext">
                <a asp-controller="Search" asp-all-route-data="GetRouteData(Model.Page + 1)">
                    @HtmlLocalizer["next"]
                </a>
            </li>
        }
    </ul>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                document.getElementById('latitude').value = position.coords.latitude;
                document.getElementById('longitude').value = position.coords.longitude;
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    });
</script>